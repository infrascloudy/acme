#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

import os
import subprocess
import argparse

from acme import find_acme_project, find_playbookpath, ACME_SITE_PLAYBOOK
from acme.config import read_config

GIT_URI = "https://github.com/infrascloudy"

PLAYBOOKS_GIT_URI = GIT_URI + "/acme-playbooks"

GIT_ROLE_PREFIX = "ansible-"

GALAXY_REQUIREMENTS = "galaxy/requirements.txt"

GALAXY_ACCOUNT = "infrascloudy"


def fetch_or_clone_roles(roles_path, requirements_file, dry_run=False):
    with open(requirements_file) as fh:
        requirements = [r.strip().split() for r in fh.readlines()]
    num_roles = len(requirements)

    for cnt, role_name in enumerate(requirements, 1):
        try:
            role_name, role_version = role_name[:2]
        except:
            role_name = role_name[0]
            role_version = 'master'

        if role_name.startswith(GALAXY_ACCOUNT + '.'):
            galaxy_name = role_name
            role_name = role_name.split('.', 1)[1]
        else:
            galaxy_name = GALAXY_ACCOUNT + '.' + role_name

        remote_uri = GIT_URI + '/' + GIT_ROLE_PREFIX + role_name
        destination_dir = os.path.join(roles_path, galaxy_name)
        progress_label = "[{role_version}] ({cnt}/{num})".format(**locals())

        if os.path.exists(destination_dir):
            print("Updating", remote_uri, progress_label)
            update_git_repository(destination_dir, dry_run)
        else:
            print("Installing", remote_uri, progress_label)
            clone_git_repository(remote_uri, role_version, destination_dir, dry_run)


def clone_git_repository(repo_uri, branch, destination, dry_run=False):
    if dry_run:
        print("Cloning '%s' to %s..." % (repo_uri, destination))
    else:
        subprocess.call(['git', 'clone', '--quiet', '--branch', branch, repo_uri, destination])


def update_git_repository(path, dry_run=False):
    old_pwd = os.getcwd()
    os.chdir(path)

    if dry_run:
        subprocess.call(['git', 'fetch'])
        subprocess.call(['git', 'diff', 'HEAD', 'origin', '--stat'])
    else:
        current_sha = subprocess.check_output(['git', 'rev-parse', 'HEAD']).strip()
        subprocess.call(['git', 'fetch', '--quiet'])
        fetch_sha = subprocess.check_output(['git', 'rev-parse', 'FETCH_HEAD']).strip()

        if current_sha != fetch_sha:
            subprocess.call(['git', 'merge', fetch_sha])

    os.chdir(old_pwd)


def main(project_dir=None, dry_run=False):
    if project_dir:
        if not os.path.exists(project_dir):
            print ("Creating project directory in", project_dir)
            if not dry_run:
                os.makedirs(project_dir)

        install_path = os.path.join(project_dir, "acme-playbooks")

        if os.path.isfile(os.path.join(install_path, ACME_SITE_PLAYBOOK)):
            playbooks_path = install_path
        else:
            playbooks_path = None

    else:
        project_root = find_acme_project(required=False)
        config = read_config(project_root)
        playbooks_path = find_playbookpath(config, project_root, required=False)
        if playbooks_path:
            install_path = os.path.dirname(playbooks_path)
        else:
            install_path = config['paths']['install-path']

    roles_path = os.path.join(install_path, 'roles')

    if not playbooks_path:
        if dry_run:
            raise SystemExit("--dry-run requires Acme playbooks.\n" \
                             "Run acme-update without --dry-run first.")

        print("Acme playbooks have not been found, installing into",
              install_path)
        print()

        clone_git_repository(PLAYBOOKS_GIT_URI, 'master', install_path, dry_run)
        os.chdir(install_path)
        os.makedirs(roles_path)
    else:
        print("Acme playbooks have been found in", install_path)
        update_git_repository(install_path, dry_run)
        print()
        os.chdir(install_path)

    fetch_or_clone_roles(roles_path, GALAXY_REQUIREMENTS, dry_run)


parser = argparse.ArgumentParser()
parser.add_argument('--dry-run', action='store_true',
                    help='perform a trial run with no changes made')
parser.add_argument('project_dir', nargs='?')
args = parser.parse_args()

try:
    main(args.project_dir, args.dry_run)
except KeyboardInterrupt:
    raise SystemExit('... aborted')
