#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import os
import codecs
import subprocess
import glob
import argparse
from sys import platform

from acme import INVENTORY, SECRET_NAME, ENCFS_PREFIX, find_acme_project
from acme.config import ACME_CONFIG
from acme.cmds import error_msg


SKEL_DIRS = (
    os.path.join("ansible", INVENTORY, "group_vars", "all"),
    os.path.join("ansible", INVENTORY, "host_vars"),
    os.path.join("ansible", "playbooks"),
    os.path.join("ansible", "roles"),
)

DEFAULT_ACME_CONFIG = """
# -*- conf -*-

[paths]
;data-home: /opt/acme

[ansible defaults]
display_skipped_hosts = False
retry_files_enabled = False
;callback_plugins = /my/plugins/callback
;roles_path = /my/roles

[ansible paramiko]
;record_host_keys=True

[ansible ssh_connection]
;ssh_args = -o ControlMaster=auto -o ControlPersist=60s
"""

DEFAULT_GITIGNORE = """\
ansible/{SECRET_NAME}
{SECRET_NAME}
{ENCFS_PREFIX}{SECRET_NAME}
ansible.cfg

#-- python
*.py[co]

#-- vim
[._]*.s[a-w][a-z]
[._]s[a-w][a-z]
*.un~
Session.vim
.netrwhist
*~

#-- Emacs
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

#-- SublimeText
*.sublime-workspace
#*.sublime-project

#-- sftp configuration file
sftp-config.json
"""

HOSTS_FILE_HEADER = """\
# This is an Ansible inventory file in INI format. You can define a list of
# hosts and groups to be managed by this particular inventory.

# Hosts listed under [acme_all_hosts] will have common Acme plays
# ran against them. It will include services such as iptables, DNS, Postfix,
# sshd configuration and more.
#
# View the list here:
# https://github.com/infrascloudy/acme-playbooks/blob/master/playbooks/common.yml
#
# You should check Getting Started guide for useful suggestions:
# http://infrascloudy.github.io
"""

HOSTS_FILE_CONTENT_CONTROLER = """
# Your host is eligible to be managed by Acme's common playbook. If you want
# that functionality and more, then uncomment your hostname below.

[acme_all_hosts]
#%s ansible_connection=local
""" % platform.node()

HOSTS_FILE_CONTENT_NO_CONTROLER = """
# Your host was not detected as compatible with Acme's playbooks, so you will
# not be able to leverage the above features on your current operating system.
# You can however use a virtual machine as the Ansible Controller.

[acme_all_hosts]

"""


def write_file(filename, *content):
    if not os.path.exists(filename):
        with open(filename, 'w') as fh:
            fh.writelines(content)


def write_config_files(project_root):
    write_file(os.path.join(project_root, ACME_CONFIG), DEFAULT_ACME_CONFIG)

    write_file(os.path.join(project_root, '.gitignore'), DEFAULT_GITIGNORE.format(SECRET_NAME=SECRET_NAME, ENCFS_PREFIX=ENCFS_PREFIX))
    host_filename = os.path.join(project_root, 'ansible', INVENTORY, 'hosts')

    if platform.system() == 'Linux':
        write_file(host_filename, HOSTS_FILE_HEADER, HOSTS_FILE_CONTENT_CONTROLER)
    else:
        write_file(host_filename, HOSTS_FILE_HEADER, HOSTS_FILE_CONTENT_NO_CONTROLER)


def main(project_root):
    orig_project_root = project_root
    project_root = os.path.abspath(project_root)

    acme_project_root = find_acme_project(project_root, required=False)

    if os.path.exists(os.path.join(project_root, ACME_CONFIG)):
        error_msg("You are inside %s project already" % acme_project_root)

    print("Creating new project directory in", orig_project_root, "...")

    for skel_dir in SKEL_DIRS:
        skel_dir = os.path.join(project_root, skel_dir)
        if not os.path.isdir(skel_dir):
            os.makedirs(skel_dir)

parser = argparse.ArgumentParser()
parser.add_argument('project_dir', default=os.curdir)
args = parser.parse_args()

try:
    main(args.prject_dir)
except KeyboardInterrupt:
    raise SystemExit('... Aborted')
